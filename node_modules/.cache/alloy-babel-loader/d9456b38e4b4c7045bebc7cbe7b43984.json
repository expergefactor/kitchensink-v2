{"remainingRequest":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js??ref--4-2!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/controllers/controls/textfield.js","dependencies":[{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/controllers/controls/textfield.js","mtime":1603117181806},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/views/controls/textfield.xml","mtime":1603117232920},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/styles/controls/textfield.tss","mtime":1603117222694},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/controllers/controls/textfield.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;AACA,GAAA,SAAA,WAAA,GAAA,CAEA,CAFA;;AAIA,MAAA,iBAAA;;AAEA,WAAA,qBAAA,CAAA;AAAA,IAAA,MAAA;AAAA,IAAA;AAAA,GAAA,EAAA;AACA,IAAA,MAAA,CAAA,GAAA,WAAA,MAAA,CAAA,EAAA,+BAAA,KAAA;AACA;;AAEA,WAAA,iBAAA,CAAA;AAAA,IAAA;AAAA,GAAA,EAAA;AACA,IAAA,iBAAA,GAAA,MAAA,CAAA,EAAA;AACA,IAAA,MAAA,CAAA,GAAA,WAAA,MAAA,CAAA,EAAA;AACA;;AAEA,WAAA,gBAAA,CAAA;AAAA,IAAA;AAAA,GAAA,EAAA;AACA,IAAA,iBAAA,GAAA,IAAA;AACA,IAAA,MAAA,CAAA,GAAA,WAAA,MAAA,CAAA,EAAA;AACA;;AAEA,WAAA,aAAA,GAAA;AACA,QAAA,iBAAA,EAAA;AACA,MAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,IAAA;AACA;AACA,G","sourcesContent":["\n\n/**\n * The scoped constructor of the controller.\n **/\n(function constructor() {\n\n})();\n\nlet focussedTextfield;\n\nfunction textFieldValueChanged({ source, value }) {\n  logger.log(`${source.id} changed value to ${value}`);\n}\n\nfunction textFieldFocussed({ source }) {\n  focussedTextfield = source.id;\n  logger.log(`${source.id} focussed!`);\n}\n\nfunction textFieldBlurred({ source }) {\n  focussedTextfield = null;\n  logger.log(`${source.id} blurred!`);\n}\n\nfunction blurTextfield() {\n  if (focussedTextfield) {\n    $[focussedTextfield].blur();\n  }\n}"]}]}