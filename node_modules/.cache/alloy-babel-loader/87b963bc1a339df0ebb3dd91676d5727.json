{"remainingRequest":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js??ref--4-2!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/imports-loader/index.js?define=>false!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy/Alloy/lib/alloy/backbone/0.9.2/backbone.js","dependencies":[{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy/Alloy/lib/alloy/backbone/0.9.2/backbone.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/imports-loader/index.js","mtime":1519153988000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy/Alloy/lib/alloy/backbone/0.9.2/backbone.js"],"names":["define","root","previousBackbone","Backbone","slice","Array","prototype","splice","exports","VERSION","_","require","$","jQuery","Zepto","ender","setDomLibrary","lib","noConflict","emulateHTTP","emulateJSON","eventSplitter","Events","on","events","callback","context","calls","event","node","tail","list","split","_callbacks","shift","next","off","cb","ctx","keys","trigger","args","all","rest","call","arguments","apply","concat","bind","unbind","Model","attributes","options","defaults","parse","getValue","extend","collection","_escapedAttributes","cid","uniqueId","changed","_silent","_pending","set","silent","_previousAttributes","clone","initialize","idAttribute","toJSON","get","attr","escape","html","val","has","key","value","attrs","isObject","unset","_validate","id","changes","now","escaped","prev","isEqual","change","clear","fetch","model","success","resp","status","xhr","error","wrapError","sync","save","current","wait","silentOptions","serverAttrs","method","isNew","destroy","triggerDestroy","url","base","urlError","charAt","length","encodeURIComponent","constructor","changing","_changing","isEmpty","hasChanged","changedAttributes","diff","old","previous","previousAttributes","isValid","validate","Collection","models","comparator","_reset","reset","map","add","i","index","cids","ids","dups","isArray","_prepareModel","Error","_byCid","_byId","push","_onModelEvent","at","sort","remove","l","getByCid","indexOf","_removeReference","pop","unshift","where","filter","boundComparator","sortBy","pluck","undefined","create","coll","nextModel","chain","methods","each","toArray","Router","routes","_bindRoutes","namedParam","splatParam","escapeRegExp","route","name","history","History","isRegExp","_routeToRegExp","fragment","_extractParameters","navigate","replace","RegExp","exec","handlers","bindAll","routeStripper","isExplorer","started","interval","getHash","windowOverride","loc","location","window","match","href","getFragment","forcePushState","_hasPushState","pathname","search","substr","start","_wantsHashChange","hashChange","_wantsPushState","pushState","docMode","document","documentMode","oldIE","navigator","userAgent","toLowerCase","iframe","hide","appendTo","contentWindow","checkUrl","_checkUrlInterval","setInterval","atRoot","hash","replaceState","title","protocol","host","loadUrl","stop","clearInterval","e","fragmentOverride","matched","any","handler","test","frag","_updateHash","open","close","assign","toString","View","_configure","_ensureElement","delegateEvents","delegateEventSplitter","viewOptions","tagName","selector","$el","find","render","make","content","el","createElement","setElement","element","delegate","undelegateEvents","isFunction","eventName","className","protoProps","classProps","child","inherits","methodMap","type","params","dataType","data","contentType","JSON","stringify","_method","beforeSend","setRequestHeader","processData","ajax","onError","originalModel","ctor","parent","staticProps","hasOwnProperty","__super__","object","prop"],"mappings":"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","sourcesContent":["/*** IMPORTS FROM imports-loader ***/\nvar define = false;\n\n//     Backbone.js 0.9.2\n\n//     (c) 2010-2012 Jeremy Ashkenas, DocumentCloud Inc.\n//     Backbone may be freely distributed under the MIT license.\n//     For all details and documentation:\n//     http://backbonejs.org\n\n(function(){\n\n// Initial Setup\n// -------------\n\n// Save a reference to the global object (`window` in the browser, `global`\n// on the server).\nvar root = this;\n\n// Save the previous value of the `Backbone` variable, so that it can be\n// restored later on, if `noConflict` is used.\nvar previousBackbone = root.Backbone;\n\n// Create a local reference to slice/splice.\nvar slice = Array.prototype.slice;\nvar splice = Array.prototype.splice;\n\n// The top-level namespace. All public Backbone classes and modules will\n// be attached to this. Exported for both CommonJS and the browser.\nvar Backbone;\nif (typeof exports !== 'undefined') {\n\tBackbone = exports;\n} else {\n\tBackbone = root.Backbone = {};\n}\n\n// Current version of the library. Keep in sync with `package.json`.\nBackbone.VERSION = '0.9.2';\n\n// Require Underscore, if we're on the server, and it's not already present.\nvar _ = root._;\nif (!_ && (typeof require !== 'undefined')) _ = require('/alloy/underscore');\n\n// For Backbone's purposes, jQuery, Zepto, or Ender owns the `$` variable.\nvar $ = root.jQuery || root.Zepto || root.ender;\n\n// Set the JavaScript library that will be used for DOM manipulation and\n// Ajax calls (a.k.a. the `$` variable). By default Backbone will use: jQuery,\n// Zepto, or Ender; but the `setDomLibrary()` method lets you inject an\n// alternate JavaScript library (or a mock library for testing your views\n// outside of a browser).\nBackbone.setDomLibrary = function(lib) {\n\t$ = lib;\n};\n\n// Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable\n// to its previous owner. Returns a reference to this Backbone object.\nBackbone.noConflict = function() {\n\troot.Backbone = previousBackbone;\n\treturn this;\n};\n\n// Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option\n// will fake `\"PUT\"` and `\"DELETE\"` requests via the `_method` parameter and\n// set a `X-Http-Method-Override` header.\nBackbone.emulateHTTP = false;\n\n// Turn on `emulateJSON` to support legacy servers that can't deal with direct\n// `application/json` requests ... will encode the body as\n// `application/x-www-form-urlencoded` instead and will send the model in a\n// form param named `model`.\nBackbone.emulateJSON = false;\n\n// Backbone.Events\n// -----------------\n\n// Regular expression used to split event strings\nvar eventSplitter = /\\s+/;\n\n// A module that can be mixed in to *any object* in order to provide it with\n// custom events. You may bind with `on` or remove with `off` callback functions\n// to an event; trigger`-ing an event fires all callbacks in succession.\n//\n//     var object = {};\n//     _.extend(object, Backbone.Events);\n//     object.on('expand', function(){ alert('expanded'); });\n//     object.trigger('expand');\n//\nvar Events = Backbone.Events = {\n\n\t// Bind one or more space separated events, `events`, to a `callback`\n\t// function. Passing `\"all\"` will bind the callback to all events fired.\n\ton: function(events, callback, context) {\n\n\tvar calls, event, node, tail, list;\n\tif (!callback) return this;\n\tevents = events.split(eventSplitter);\n\tcalls = this._callbacks || (this._callbacks = {});\n\n\t// Create an immutable callback list, allowing traversal during\n\t// modification.  The tail is an empty object that will always be used\n\t// as the next node.\n\twhile (event = events.shift()) {\n\t\tlist = calls[event];\n\t\tnode = list ? list.tail : {};\n\t\tnode.next = tail = {};\n\t\tnode.context = context;\n\t\tnode.callback = callback;\n\t\tcalls[event] = {tail: tail, next: list ? list.next : node};\n\t}\n\n\treturn this;\n\t},\n\n\t// Remove one or many callbacks. If `context` is null, removes all callbacks\n\t// with that function. If `callback` is null, removes all callbacks for the\n\t// event. If `events` is null, removes all bound callbacks for all events.\n\toff: function(events, callback, context) {\n\tvar event, calls, node, tail, cb, ctx;\n\n\t// No events, or removing *all* events.\n\tif (!(calls = this._callbacks)) return;\n\tif (!(events || callback || context)) {\n\t\tdelete this._callbacks;\n\t\treturn this;\n\t}\n\n\t// Loop through the listed events and contexts, splicing them out of the\n\t// linked list of callbacks if appropriate.\n\tevents = events ? events.split(eventSplitter) : _.keys(calls);\n\twhile (event = events.shift()) {\n\t\tnode = calls[event];\n\t\tdelete calls[event];\n\t\tif (!node || !(callback || context)) continue;\n\t\t// Create a new list, omitting the indicated callbacks.\n\t\ttail = node.tail;\n\t\twhile ((node = node.next) !== tail) {\n\t\tcb = node.callback;\n\t\tctx = node.context;\n\t\tif ((callback && cb !== callback) || (context && ctx !== context)) {\n\t\t\tthis.on(event, cb, ctx);\n\t\t}\n\t\t}\n\t}\n\n\treturn this;\n\t},\n\n\t// Trigger one or many events, firing all bound callbacks. Callbacks are\n\t// passed the same arguments as `trigger` is, apart from the event name\n\t// (unless you're listening on `\"all\"`, which will cause your callback to\n\t// receive the true name of the event as the first argument).\n\ttrigger: function(events) {\n\tvar event, node, calls, tail, args, all, rest;\n\tif (!(calls = this._callbacks)) return this;\n\tall = calls.all;\n\tevents = events.split(eventSplitter);\n\trest = slice.call(arguments, 1);\n\n\t// For each event, walk through the linked list of callbacks twice,\n\t// first to trigger the event, then to trigger any `\"all\"` callbacks.\n\twhile (event = events.shift()) {\n\t\tif (node = calls[event]) {\n\t\ttail = node.tail;\n\t\twhile ((node = node.next) !== tail) {\n\t\t\tnode.callback.apply(node.context || this, rest);\n\t\t}\n\t\t}\n\t\tif (node = all) {\n\t\ttail = node.tail;\n\t\targs = [event].concat(rest);\n\t\twhile ((node = node.next) !== tail) {\n\t\t\tnode.callback.apply(node.context || this, args);\n\t\t}\n\t\t}\n\t}\n\n\treturn this;\n\t}\n\n};\n\n// Aliases for backwards compatibility.\nEvents.bind   = Events.on;\nEvents.unbind = Events.off;\n\n// Backbone.Model\n// --------------\n\n// Create a new model, with defined attributes. A client id (`cid`)\n// is automatically generated and assigned for you.\nvar Model = Backbone.Model = function(attributes, options) {\n\tvar defaults;\n\tattributes || (attributes = {});\n\tif (options && options.parse) attributes = this.parse(attributes);\n\tif (defaults = getValue(this, 'defaults')) {\n\tattributes = _.extend({}, defaults, attributes);\n\t}\n\tif (options && options.collection) this.collection = options.collection;\n\tthis.attributes = {};\n\tthis._escapedAttributes = {};\n\tthis.cid = _.uniqueId('c');\n\tthis.changed = {};\n\tthis._silent = {};\n\tthis._pending = {};\n\tthis.set(attributes, {silent: true});\n\t// Reset change tracking.\n\tthis.changed = {};\n\tthis._silent = {};\n\tthis._pending = {};\n\tthis._previousAttributes = _.clone(this.attributes);\n\tthis.initialize.apply(this, arguments);\n};\n\n// Attach all inheritable methods to the Model prototype.\n_.extend(Model.prototype, Events, {\n\n\t// A hash of attributes whose current and previous value differ.\n\tchanged: null,\n\n\t// A hash of attributes that have silently changed since the last time\n\t// `change` was called.  Will become pending attributes on the next call.\n\t_silent: null,\n\n\t// A hash of attributes that have changed since the last `'change'` event\n\t// began.\n\t_pending: null,\n\n\t// The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\n\t// CouchDB users may want to set this to `\"_id\"`.\n\tidAttribute: 'id',\n\n\t// Initialize is an empty function by default. Override it with your own\n\t// initialization logic.\n\tinitialize: function(){},\n\n\t// Return a copy of the model's `attributes` object.\n\ttoJSON: function(options) {\n\treturn _.clone(this.attributes);\n\t},\n\n\t// Get the value of an attribute.\n\tget: function(attr) {\n\treturn this.attributes[attr];\n\t},\n\n\t// Get the HTML-escaped value of an attribute.\n\tescape: function(attr) {\n\tvar html;\n\tif (html = this._escapedAttributes[attr]) return html;\n\tvar val = this.get(attr);\n\treturn this._escapedAttributes[attr] = _.escape(val == null ? '' : '' + val);\n\t},\n\n\t// Returns `true` if the attribute contains a value that is not null\n\t// or undefined.\n\thas: function(attr) {\n\treturn this.get(attr) != null;\n\t},\n\n\t// Set a hash of model attributes on the object, firing `\"change\"` unless\n\t// you choose to silence it.\n\tset: function(key, value, options) {\n\tvar attrs, attr, val;\n\n\t// Handle both\n\tif (_.isObject(key) || key == null) {\n\t\tattrs = key;\n\t\toptions = value;\n\t} else {\n\t\tattrs = {};\n\t\tattrs[key] = value;\n\t}\n\n\t// Extract attributes and options.\n\toptions || (options = {});\n\tif (!attrs) return this;\n\tif (attrs instanceof Model) attrs = attrs.attributes;\n\tif (options.unset) for (attr in attrs) attrs[attr] = void 0;\n\n\t// Run validation.\n\tif (!this._validate(attrs, options)) return false;\n\n\t// Check for changes of `id`.\n\tif (this.idAttribute in attrs) this.id = attrs[this.idAttribute];\n\n\tvar changes = options.changes = {};\n\tvar now = this.attributes;\n\tvar escaped = this._escapedAttributes;\n\tvar prev = this._previousAttributes || {};\n\n\t// For each `set` attribute...\n\tfor (attr in attrs) {\n\t\tval = attrs[attr];\n\n\t\t// If the new and current value differ, record the change.\n\t\tif (!_.isEqual(now[attr], val) || (options.unset && _.has(now, attr))) {\n\t\tdelete escaped[attr];\n\t\t(options.silent ? this._silent : changes)[attr] = true;\n\t\t}\n\n\t\t// Update or delete the current value.\n\t\toptions.unset ? delete now[attr] : now[attr] = val;\n\n\t\t// If the new and previous value differ, record the change.  If not,\n\t\t// then remove changes for this attribute.\n\t\tif (!_.isEqual(prev[attr], val) || (_.has(now, attr) != _.has(prev, attr))) {\n\t\tthis.changed[attr] = val;\n\t\tif (!options.silent) this._pending[attr] = true;\n\t\t} else {\n\t\tdelete this.changed[attr];\n\t\tdelete this._pending[attr];\n\t\t}\n\t}\n\n\t// Fire the `\"change\"` events.\n\tif (!options.silent) this.change(options);\n\treturn this;\n\t},\n\n\t// Remove an attribute from the model, firing `\"change\"` unless you choose\n\t// to silence it. `unset` is a noop if the attribute doesn't exist.\n\tunset: function(attr, options) {\n\t(options || (options = {})).unset = true;\n\treturn this.set(attr, null, options);\n\t},\n\n\t// Clear all attributes on the model, firing `\"change\"` unless you choose\n\t// to silence it.\n\tclear: function(options) {\n\t(options || (options = {})).unset = true;\n\treturn this.set(_.clone(this.attributes), options);\n\t},\n\n\t// Fetch the model from the server. If the server's representation of the\n\t// model differs from its current attributes, they will be overriden,\n\t// triggering a `\"change\"` event.\n\tfetch: function(options) {\n\toptions = options ? _.clone(options) : {};\n\tvar model = this;\n\tvar success = options.success;\n\toptions.success = function(resp, status, xhr) {\n\t\tif (!model.set(model.parse(resp, xhr), options)) return false;\n\t\tif (success) success(model, resp);\n\t};\n\toptions.error = Backbone.wrapError(options.error, model, options);\n\treturn (this.sync || Backbone.sync).call(this, 'read', this, options);\n\t},\n\n\t// Set a hash of model attributes, and sync the model to the server.\n\t// If the server returns an attributes hash that differs, the model's\n\t// state will be `set` again.\n\tsave: function(key, value, options) {\n\tvar attrs, current;\n\n\t// Handle both `(\"key\", value)` and `({key: value})` -style calls.\n\tif (_.isObject(key) || key == null) {\n\t\tattrs = key;\n\t\toptions = value;\n\t} else {\n\t\tattrs = {};\n\t\tattrs[key] = value;\n\t}\n\toptions = options ? _.clone(options) : {};\n\n\t// If we're \"wait\"-ing to set changed attributes, validate early.\n\tif (options.wait) {\n\t\tif (!this._validate(attrs, options)) return false;\n\t\tcurrent = _.clone(this.attributes);\n\t}\n\n\t// Regular saves `set` attributes before persisting to the server.\n\tvar silentOptions = _.extend({}, options, {silent: true});\n\tif (attrs && !this.set(attrs, options.wait ? silentOptions : options)) {\n\t\treturn false;\n\t}\n\n\t// After a successful server-side save, the client is (optionally)\n\t// updated with the server-side state.\n\tvar model = this;\n\tvar success = options.success;\n\toptions.success = function(resp, status, xhr) {\n\t\tvar serverAttrs = model.parse(resp, xhr);\n\t\tif (options.wait) {\n\t\tdelete options.wait;\n\t\tserverAttrs = _.extend(attrs || {}, serverAttrs);\n\t\t}\n\t\tif (!model.set(serverAttrs, options)) return false;\n\t\tif (success) {\n\t\tsuccess(model, resp);\n\t\t} else {\n\t\tmodel.trigger('sync', model, resp, options);\n\t\t}\n\t};\n\n\t// Finish configuring and sending the Ajax request.\n\toptions.error = Backbone.wrapError(options.error, model, options);\n\tvar method = this.isNew() ? 'create' : 'update';\n\tvar xhr = (this.sync || Backbone.sync).call(this, method, this, options);\n\tif (options.wait) this.set(current, silentOptions);\n\treturn xhr;\n\t},\n\n\t// Destroy this model on the server if it was already persisted.\n\t// Optimistically removes the model from its collection, if it has one.\n\t// If `wait: true` is passed, waits for the server to respond before removal.\n\tdestroy: function(options) {\n\toptions = options ? _.clone(options) : {};\n\tvar model = this;\n\tvar success = options.success;\n\n\tvar triggerDestroy = function() {\n\t\tmodel.trigger('destroy', model, model.collection, options);\n\t};\n\n\tif (this.isNew()) {\n\t\ttriggerDestroy();\n\t\treturn false;\n\t}\n\n\toptions.success = function(resp) {\n\t\tif (options.wait) triggerDestroy();\n\t\tif (success) {\n\t\tsuccess(model, resp);\n\t\t} else {\n\t\tmodel.trigger('sync', model, resp, options);\n\t\t}\n\t};\n\n\toptions.error = Backbone.wrapError(options.error, model, options);\n\tvar xhr = (this.sync || Backbone.sync).call(this, 'delete', this, options);\n\tif (!options.wait) triggerDestroy();\n\treturn xhr;\n\t},\n\n\t// Default URL for the model's representation on the server -- if you're\n\t// using Backbone's restful methods, override this to change the endpoint\n\t// that will be called.\n\turl: function() {\n\tvar base = getValue(this, 'urlRoot') || getValue(this.collection, 'url') || urlError();\n\tif (this.isNew()) return base;\n\treturn base + (base.charAt(base.length - 1) == '/' ? '' : '/') + encodeURIComponent(this.id);\n\t},\n\n\t// **parse** converts a response into the hash of attributes to be `set` on\n\t// the model. The default implementation is just to pass the response along.\n\tparse: function(resp, xhr) {\n\treturn resp;\n\t},\n\n\t// Create a new model with identical attributes to this one.\n\tclone: function() {\n\treturn new this.constructor(this.attributes);\n\t},\n\n\t// A model is new if it has never been saved to the server, and lacks an id.\n\tisNew: function() {\n\treturn this.id == null;\n\t},\n\n\t// Call this method to manually fire a `\"change\"` event for this model and\n\t// a `\"change:attribute\"` event for each changed attribute.\n\t// Calling this will cause all objects observing the model to update.\n\tchange: function(options) {\n\toptions || (options = {});\n\tvar changing = this._changing;\n\tthis._changing = true;\n\n\t// Silent changes become pending changes.\n\tfor (var attr in this._silent) this._pending[attr] = true;\n\n\t// Silent changes are triggered.\n\tvar changes = _.extend({}, options.changes, this._silent);\n\tthis._silent = {};\n\tfor (var attr in changes) {\n\t\tthis.trigger('change:' + attr, this, this.get(attr), options);\n\t}\n\tif (changing) return this;\n\n\t// Continue firing `\"change\"` events while there are pending changes.\n\twhile (!_.isEmpty(this._pending)) {\n\t\tthis._pending = {};\n\t\tthis.trigger('change', this, options);\n\t\t// Pending and silent changes still remain.\n\t\tfor (var attr in this.changed) {\n\t\tif (this._pending[attr] || this._silent[attr]) continue;\n\t\tdelete this.changed[attr];\n\t\t}\n\t\tthis._previousAttributes = _.clone(this.attributes);\n\t}\n\n\tthis._changing = false;\n\treturn this;\n\t},\n\n\t// Determine if the model has changed since the last `\"change\"` event.\n\t// If you specify an attribute name, determine if that attribute has changed.\n\thasChanged: function(attr) {\n\tif (!arguments.length) return !_.isEmpty(this.changed);\n\treturn _.has(this.changed, attr);\n\t},\n\n\t// Return an object containing all the attributes that have changed, or\n\t// false if there are no changed attributes. Useful for determining what\n\t// parts of a view need to be updated and/or what attributes need to be\n\t// persisted to the server. Unset attributes will be set to undefined.\n\t// You can also pass an attributes object to diff against the model,\n\t// determining if there *would be* a change.\n\tchangedAttributes: function(diff) {\n\tif (!diff) return this.hasChanged() ? _.clone(this.changed) : false;\n\tvar val, changed = false, old = this._previousAttributes;\n\tfor (var attr in diff) {\n\t\tif (_.isEqual(old[attr], (val = diff[attr]))) continue;\n\t\t(changed || (changed = {}))[attr] = val;\n\t}\n\treturn changed;\n\t},\n\n\t// Get the previous value of an attribute, recorded at the time the last\n\t// `\"change\"` event was fired.\n\tprevious: function(attr) {\n\tif (!arguments.length || !this._previousAttributes) return null;\n\treturn this._previousAttributes[attr];\n\t},\n\n\t// Get all of the attributes of the model at the time of the previous\n\t// `\"change\"` event.\n\tpreviousAttributes: function() {\n\treturn _.clone(this._previousAttributes);\n\t},\n\n\t// Check if the model is currently in a valid state. It's only possible to\n\t// get into an *invalid* state if you're using silent changes.\n\tisValid: function() {\n\treturn !this.validate(this.attributes);\n\t},\n\n\t// Run validation against the next complete set of model attributes,\n\t// returning `true` if all is well. If a specific `error` callback has\n\t// been passed, call that instead of firing the general `\"error\"` event.\n\t_validate: function(attrs, options) {\n\tif (options.silent || !this.validate) return true;\n\tattrs = _.extend({}, this.attributes, attrs);\n\tvar error = this.validate(attrs, options);\n\tif (!error) return true;\n\tif (options && options.error) {\n\t\toptions.error(this, error, options);\n\t} else {\n\t\tthis.trigger('error', this, error, options);\n\t}\n\treturn false;\n\t}\n\n});\n\n// Backbone.Collection\n// -------------------\n\n// Provides a standard collection class for our sets of models, ordered\n// or unordered. If a `comparator` is specified, the Collection will maintain\n// its models in sort order, as they're added and removed.\nvar Collection = Backbone.Collection = function(models, options) {\n\toptions || (options = {});\n\tif (options.model) this.model = options.model;\n\tif (options.comparator) this.comparator = options.comparator;\n\tthis._reset();\n\tthis.initialize.apply(this, arguments);\n\tif (models) this.reset(models, {silent: true, parse: options.parse});\n};\n\n// Define the Collection's inheritable methods.\n_.extend(Collection.prototype, Events, {\n\n\t// The default model for a collection is just a **Backbone.Model**.\n\t// This should be overridden in most cases.\n\tmodel: Model,\n\n\t// Initialize is an empty function by default. Override it with your own\n\t// initialization logic.\n\tinitialize: function(){},\n\n\t// The JSON representation of a Collection is an array of the\n\t// models' attributes.\n\ttoJSON: function(options) {\n\treturn this.map(function(model){ return model.toJSON(options); });\n\t},\n\n\t// Add a model, or list of models to the set. Pass **silent** to avoid\n\t// firing the `add` event for every new model.\n\tadd: function(models, options) {\n\tvar i, index, length, model, cid, id, cids = {}, ids = {}, dups = [];\n\toptions || (options = {});\n\tmodels = _.isArray(models) ? models.slice() : [models];\n\n\t// Begin by turning bare objects into model references, and preventing\n\t// invalid models or duplicate models from being added.\n\tfor (i = 0, length = models.length; i < length; i++) {\n\t\tif (!(model = models[i] = this._prepareModel(models[i], options))) {\n\t\tthrow new Error(\"Can't add an invalid model to a collection\");\n\t\t}\n\t\tcid = model.cid;\n\t\tid = model.id;\n\t\tif (cids[cid] || this._byCid[cid] || ((id != null) && (ids[id] || this._byId[id]))) {\n\t\tdups.push(i);\n\t\tcontinue;\n\t\t}\n\t\tcids[cid] = ids[id] = model;\n\t}\n\n\t// Remove duplicates.\n\ti = dups.length;\n\twhile (i--) {\n\t\tmodels.splice(dups[i], 1);\n\t}\n\n\t// Listen to added models' events, and index models for lookup by\n\t// `id` and by `cid`.\n\tfor (i = 0, length = models.length; i < length; i++) {\n\t\t(model = models[i]).on('all', this._onModelEvent, this);\n\t\tthis._byCid[model.cid] = model;\n\t\tif (model.id != null) this._byId[model.id] = model;\n\t}\n\n\t// Insert models into the collection, re-sorting if needed, and triggering\n\t// `add` events unless silenced.\n\tthis.length += length;\n\tindex = options.at != null ? options.at : this.models.length;\n\tsplice.apply(this.models, [index, 0].concat(models));\n\tif (this.comparator) this.sort({silent: true});\n\tif (options.silent) return this;\n\tfor (i = 0, length = this.models.length; i < length; i++) {\n\t\tif (!cids[(model = this.models[i]).cid]) continue;\n\t\toptions.index = i;\n\t\tmodel.trigger('add', model, this, options);\n\t}\n\treturn this;\n\t},\n\n\t// Remove a model, or a list of models from the set. Pass silent to avoid\n\t// firing the `remove` event for every model removed.\n\tremove: function(models, options) {\n\tvar i, l, index, model;\n\toptions || (options = {});\n\tmodels = _.isArray(models) ? models.slice() : [models];\n\tfor (i = 0, l = models.length; i < l; i++) {\n\t\tmodel = this.getByCid(models[i]) || this.get(models[i]);\n\t\tif (!model) continue;\n\t\tdelete this._byId[model.id];\n\t\tdelete this._byCid[model.cid];\n\t\tindex = this.indexOf(model);\n\t\tthis.models.splice(index, 1);\n\t\tthis.length--;\n\t\tif (!options.silent) {\n\t\toptions.index = index;\n\t\tmodel.trigger('remove', model, this, options);\n\t\t}\n\t\tthis._removeReference(model);\n\t}\n\treturn this;\n\t},\n\n\t// Add a model to the end of the collection.\n\tpush: function(model, options) {\n\tmodel = this._prepareModel(model, options);\n\tthis.add(model, options);\n\treturn model;\n\t},\n\n\t// Remove a model from the end of the collection.\n\tpop: function(options) {\n\tvar model = this.at(this.length - 1);\n\tthis.remove(model, options);\n\treturn model;\n\t},\n\n\t// Add a model to the beginning of the collection.\n\tunshift: function(model, options) {\n\tmodel = this._prepareModel(model, options);\n\tthis.add(model, _.extend({at: 0}, options));\n\treturn model;\n\t},\n\n\t// Remove a model from the beginning of the collection.\n\tshift: function(options) {\n\tvar model = this.at(0);\n\tthis.remove(model, options);\n\treturn model;\n\t},\n\n\t// Get a model from the set by id.\n\tget: function(id) {\n\tif (id == null) return void 0;\n\treturn this._byId[id.id != null ? id.id : id];\n\t},\n\n\t// Get a model from the set by client id.\n\tgetByCid: function(cid) {\n\treturn cid && this._byCid[cid.cid || cid];\n\t},\n\n\t// Get the model at the given index.\n\tat: function(index) {\n\treturn this.models[index];\n\t},\n\n\t// Return models with matching attributes. Useful for simple cases of `filter`.\n\twhere: function(attrs) {\n\tif (_.isEmpty(attrs)) return [];\n\treturn this.filter(function(model) {\n\t\tfor (var key in attrs) {\n\t\tif (attrs[key] !== model.get(key)) return false;\n\t\t}\n\t\treturn true;\n\t});\n\t},\n\n\t// Force the collection to re-sort itself. You don't need to call this under\n\t// normal circumstances, as the set will maintain sort order as each item\n\t// is added.\n\tsort: function(options) {\n\toptions || (options = {});\n\tif (!this.comparator) throw new Error('Cannot sort a set without a comparator');\n\tvar boundComparator = _.bind(this.comparator, this);\n\tif (this.comparator.length == 1) {\n\t\tthis.models = this.sortBy(boundComparator);\n\t} else {\n\t\tthis.models.sort(boundComparator);\n\t}\n\tif (!options.silent) this.trigger('reset', this, options);\n\treturn this;\n\t},\n\n\t// Pluck an attribute from each model in the collection.\n\tpluck: function(attr) {\n\treturn _.map(this.models, function(model){ return model.get(attr); });\n\t},\n\n\t// When you have more items than you want to add or remove individually,\n\t// you can reset the entire set with a new list of models, without firing\n\t// any `add` or `remove` events. Fires `reset` when finished.\n\treset: function(models, options) {\n\tmodels  || (models = []);\n\toptions || (options = {});\n\tfor (var i = 0, l = this.models.length; i < l; i++) {\n\t\tthis._removeReference(this.models[i]);\n\t}\n\tthis._reset();\n\tthis.add(models, _.extend({silent: true}, options));\n\tif (!options.silent) this.trigger('reset', this, options);\n\treturn this;\n\t},\n\n\t// Fetch the default set of models for this collection, resetting the\n\t// collection when they arrive. If `add: true` is passed, appends the\n\t// models to the collection instead of resetting.\n\tfetch: function(options) {\n\toptions = options ? _.clone(options) : {};\n\tif (options.parse === undefined) options.parse = true;\n\tvar collection = this;\n\tvar success = options.success;\n\toptions.success = function(resp, status, xhr) {\n\t\tcollection[options.add ? 'add' : 'reset'](collection.parse(resp, xhr), options);\n\t\tif (success) success(collection, resp);\n\t};\n\toptions.error = Backbone.wrapError(options.error, collection, options);\n\treturn (this.sync || Backbone.sync).call(this, 'read', this, options);\n\t},\n\n\t// Create a new instance of a model in this collection. Add the model to the\n\t// collection immediately, unless `wait: true` is passed, in which case we\n\t// wait for the server to agree.\n\tcreate: function(model, options) {\n\tvar coll = this;\n\toptions = options ? _.clone(options) : {};\n\tmodel = this._prepareModel(model, options);\n\tif (!model) return false;\n\tif (!options.wait) coll.add(model, options);\n\tvar success = options.success;\n\toptions.success = function(nextModel, resp, xhr) {\n\t\tif (options.wait) coll.add(nextModel, options);\n\t\tif (success) {\n\t\tsuccess(nextModel, resp);\n\t\t} else {\n\t\tnextModel.trigger('sync', model, resp, options);\n\t\t}\n\t};\n\tmodel.save(null, options);\n\treturn model;\n\t},\n\n\t// **parse** converts a response into a list of models to be added to the\n\t// collection. The default implementation is just to pass it through.\n\tparse: function(resp, xhr) {\n\treturn resp;\n\t},\n\n\t// Proxy to _'s chain. Can't be proxied the same way the rest of the\n\t// underscore methods are proxied because it relies on the underscore\n\t// constructor.\n\tchain: function () {\n\treturn _(this.models).chain();\n\t},\n\n\t// Reset all internal state. Called when the collection is reset.\n\t_reset: function(options) {\n\tthis.length = 0;\n\tthis.models = [];\n\tthis._byId  = {};\n\tthis._byCid = {};\n\t},\n\n\t// Prepare a model or hash of attributes to be added to this collection.\n\t_prepareModel: function(model, options) {\n\toptions || (options = {});\n\tif (!(model instanceof Model)) {\n\t\tvar attrs = model;\n\t\toptions.collection = this;\n\t\tmodel = new this.model(attrs, options);\n\t\tif (!model._validate(model.attributes, options)) model = false;\n\t} else if (!model.collection) {\n\t\tmodel.collection = this;\n\t}\n\treturn model;\n\t},\n\n\t// Internal method to remove a model's ties to a collection.\n\t_removeReference: function(model) {\n\tif (this == model.collection) {\n\t\tdelete model.collection;\n\t}\n\tmodel.off('all', this._onModelEvent, this);\n\t},\n\n\t// Internal method called every time a model in the set fires an event.\n\t// Sets need to update their indexes when models change ids. All other\n\t// events simply proxy through. \"add\" and \"remove\" events that originate\n\t// in other collections are ignored.\n\t_onModelEvent: function(event, model, collection, options) {\n\tif ((event == 'add' || event == 'remove') && collection != this) return;\n\tif (event == 'destroy') {\n\t\tthis.remove(model, options);\n\t}\n\tif (model && event === 'change:' + model.idAttribute) {\n\t\tdelete this._byId[model.previous(model.idAttribute)];\n\t\tthis._byId[model.id] = model;\n\t}\n\tthis.trigger.apply(this, arguments);\n\t}\n\n});\n\n// Underscore methods that we want to implement on the Collection.\nvar methods = ['forEach', 'each', 'map', 'reduce', 'reduceRight', 'find',\n\t'detect', 'filter', 'select', 'reject', 'every', 'all', 'some', 'any',\n\t'include', 'contains', 'invoke', 'max', 'min', 'sortBy', 'sortedIndex',\n\t'toArray', 'size', 'first', 'initial', 'rest', 'last', 'without', 'indexOf',\n\t'shuffle', 'lastIndexOf', 'isEmpty', 'groupBy'];\n\n// Mix in each Underscore method as a proxy to `Collection#models`.\n_.each(methods, function(method) {\n\tCollection.prototype[method] = function() {\n\treturn _[method].apply(_, [this.models].concat(_.toArray(arguments)));\n\t};\n});\n\n// Backbone.Router\n// -------------------\n\n// Routers map faux-URLs to actions, and fire events when routes are\n// matched. Creating a new one sets its `routes` hash, if not set statically.\nvar Router = Backbone.Router = function(options) {\n\toptions || (options = {});\n\tif (options.routes) this.routes = options.routes;\n\tthis._bindRoutes();\n\tthis.initialize.apply(this, arguments);\n};\n\n// Cached regular expressions for matching named param parts and splatted\n// parts of route strings.\nvar namedParam    = /:\\w+/g;\nvar splatParam    = /\\*\\w+/g;\nvar escapeRegExp  = /[-[\\]{}()+?.,\\\\^$|#\\s]/g;\n\n// Set up all inheritable **Backbone.Router** properties and methods.\n_.extend(Router.prototype, Events, {\n\n\t// Initialize is an empty function by default. Override it with your own\n\t// initialization logic.\n\tinitialize: function(){},\n\n\t// Manually bind a single named route to a callback. For example:\n\t//\n\t//     this.route('search/:query/p:num', 'search', function(query, num) {\n\t//       ...\n\t//     });\n\t//\n\troute: function(route, name, callback) {\n\tBackbone.history || (Backbone.history = new History);\n\tif (!_.isRegExp(route)) route = this._routeToRegExp(route);\n\tif (!callback) callback = this[name];\n\tBackbone.history.route(route, _.bind(function(fragment) {\n\t\tvar args = this._extractParameters(route, fragment);\n\t\tcallback && callback.apply(this, args);\n\t\tthis.trigger.apply(this, ['route:' + name].concat(args));\n\t\tBackbone.history.trigger('route', this, name, args);\n\t}, this));\n\treturn this;\n\t},\n\n\t// Simple proxy to `Backbone.history` to save a fragment into the history.\n\tnavigate: function(fragment, options) {\n\tBackbone.history.navigate(fragment, options);\n\t},\n\n\t// Bind all defined routes to `Backbone.history`. We have to reverse the\n\t// order of the routes here to support behavior where the most general\n\t// routes can be defined at the bottom of the route map.\n\t_bindRoutes: function() {\n\tif (!this.routes) return;\n\tvar routes = [];\n\tfor (var route in this.routes) {\n\t\troutes.unshift([route, this.routes[route]]);\n\t}\n\tfor (var i = 0, l = routes.length; i < l; i++) {\n\t\tthis.route(routes[i][0], routes[i][1], this[routes[i][1]]);\n\t}\n\t},\n\n\t// Convert a route string into a regular expression, suitable for matching\n\t// against the current location hash.\n\t_routeToRegExp: function(route) {\n\troute = route.replace(escapeRegExp, '\\\\$&')\n\t\t\t\t.replace(namedParam, '([^\\/]+)')\n\t\t\t\t.replace(splatParam, '(.*?)');\n\treturn new RegExp('^' + route + '$');\n\t},\n\n\t// Given a route, and a URL fragment that it matches, return the array of\n\t// extracted parameters.\n\t_extractParameters: function(route, fragment) {\n\treturn route.exec(fragment).slice(1);\n\t}\n\n});\n\n// Backbone.History\n// ----------------\n\n// Handles cross-browser history management, based on URL fragments. If the\n// browser does not support `onhashchange`, falls back to polling.\nvar History = Backbone.History = function() {\n\tthis.handlers = [];\n\t_.bindAll(this, 'checkUrl');\n};\n\n// Cached regex for cleaning leading hashes and slashes .\nvar routeStripper = /^[#\\/]/;\n\n// Cached regex for detecting MSIE.\nvar isExplorer = /msie [\\w.]+/;\n\n// Has the history handling already been started?\nHistory.started = false;\n\n// Set up all inheritable **Backbone.History** properties and methods.\n_.extend(History.prototype, Events, {\n\n\t// The default interval to poll for hash changes, if necessary, is\n\t// twenty times a second.\n\tinterval: 50,\n\n\t// Gets the true hash value. Cannot use location.hash directly due to bug\n\t// in Firefox where location.hash will always be decoded.\n\tgetHash: function(windowOverride) {\n\tvar loc = windowOverride ? windowOverride.location : window.location;\n\tvar match = loc.href.match(/#(.*)$/);\n\treturn match ? match[1] : '';\n\t},\n\n\t// Get the cross-browser normalized URL fragment, either from the URL,\n\t// the hash, or the override.\n\tgetFragment: function(fragment, forcePushState) {\n\tif (fragment == null) {\n\t\tif (this._hasPushState || forcePushState) {\n\t\tfragment = window.location.pathname;\n\t\tvar search = window.location.search;\n\t\tif (search) fragment += search;\n\t\t} else {\n\t\tfragment = this.getHash();\n\t\t}\n\t}\n\tif (!fragment.indexOf(this.options.root)) fragment = fragment.substr(this.options.root.length);\n\treturn fragment.replace(routeStripper, '');\n\t},\n\n\t// Start the hash change handling, returning `true` if the current URL matches\n\t// an existing route, and `false` otherwise.\n\tstart: function(options) {\n\tif (History.started) throw new Error(\"Backbone.history has already been started\");\n\tHistory.started = true;\n\n\t// Figure out the initial configuration. Do we need an iframe?\n\t// Is pushState desired ... is it available?\n\tthis.options          = _.extend({}, {root: '/'}, this.options, options);\n\tthis._wantsHashChange = this.options.hashChange !== false;\n\tthis._wantsPushState  = !!this.options.pushState;\n\tthis._hasPushState    = !!(this.options.pushState && window.history && window.history.pushState);\n\tvar fragment          = this.getFragment();\n\tvar docMode           = document.documentMode;\n\tvar oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));\n\n\tif (oldIE) {\n\t\tthis.iframe = $('<iframe src=\"javascript:0\" tabindex=\"-1\" />').hide().appendTo('body')[0].contentWindow;\n\t\tthis.navigate(fragment);\n\t}\n\n\t// Depending on whether we're using pushState or hashes, and whether\n\t// 'onhashchange' is supported, determine how we check the URL state.\n\tif (this._hasPushState) {\n\t\t$(window).bind('popstate', this.checkUrl);\n\t} else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {\n\t\t$(window).bind('hashchange', this.checkUrl);\n\t} else if (this._wantsHashChange) {\n\t\tthis._checkUrlInterval = setInterval(this.checkUrl, this.interval);\n\t}\n\n\t// Determine if we need to change the base url, for a pushState link\n\t// opened by a non-pushState browser.\n\tthis.fragment = fragment;\n\tvar loc = window.location;\n\tvar atRoot  = loc.pathname == this.options.root;\n\n\t// If we've started off with a route from a `pushState`-enabled browser,\n\t// but we're currently in a browser that doesn't support it...\n\tif (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {\n\t\tthis.fragment = this.getFragment(null, true);\n\t\twindow.location.replace(this.options.root + '#' + this.fragment);\n\t\t// Return immediately as browser will do redirect to new url\n\t\treturn true;\n\n\t// Or if we've started out with a hash-based route, but we're currently\n\t// in a browser where it could be `pushState`-based instead...\n\t} else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {\n\t\tthis.fragment = this.getHash().replace(routeStripper, '');\n\t\twindow.history.replaceState({}, document.title, loc.protocol + '//' + loc.host + this.options.root + this.fragment);\n\t}\n\n\tif (!this.options.silent) {\n\t\treturn this.loadUrl();\n\t}\n\t},\n\n\t// Disable Backbone.history, perhaps temporarily. Not useful in a real app,\n\t// but possibly useful for unit testing Routers.\n\tstop: function() {\n\t$(window).unbind('popstate', this.checkUrl).unbind('hashchange', this.checkUrl);\n\tclearInterval(this._checkUrlInterval);\n\tHistory.started = false;\n\t},\n\n\t// Add a route to be tested when the fragment changes. Routes added later\n\t// may override previous routes.\n\troute: function(route, callback) {\n\tthis.handlers.unshift({route: route, callback: callback});\n\t},\n\n\t// Checks the current URL to see if it has changed, and if it has,\n\t// calls `loadUrl`, normalizing across the hidden iframe.\n\tcheckUrl: function(e) {\n\tvar current = this.getFragment();\n\tif (current == this.fragment && this.iframe) current = this.getFragment(this.getHash(this.iframe));\n\tif (current == this.fragment) return false;\n\tif (this.iframe) this.navigate(current);\n\tthis.loadUrl() || this.loadUrl(this.getHash());\n\t},\n\n\t// Attempt to load the current URL fragment. If a route succeeds with a\n\t// match, returns `true`. If no defined routes matches the fragment,\n\t// returns `false`.\n\tloadUrl: function(fragmentOverride) {\n\tvar fragment = this.fragment = this.getFragment(fragmentOverride);\n\tvar matched = _.any(this.handlers, function(handler) {\n\t\tif (handler.route.test(fragment)) {\n\t\thandler.callback(fragment);\n\t\treturn true;\n\t\t}\n\t});\n\treturn matched;\n\t},\n\n\t// Save a fragment into the hash history, or replace the URL state if the\n\t// 'replace' option is passed. You are responsible for properly URL-encoding\n\t// the fragment in advance.\n\t//\n\t// The options object can contain `trigger: true` if you wish to have the\n\t// route callback be fired (not usually desirable), or `replace: true`, if\n\t// you wish to modify the current URL without adding an entry to the history.\n\tnavigate: function(fragment, options) {\n\tif (!History.started) return false;\n\tif (!options || options === true) options = {trigger: options};\n\tvar frag = (fragment || '').replace(routeStripper, '');\n\tif (this.fragment == frag) return;\n\n\t// If pushState is available, we use it to set the fragment as a real URL.\n\tif (this._hasPushState) {\n\t\tif (frag.indexOf(this.options.root) != 0) frag = this.options.root + frag;\n\t\tthis.fragment = frag;\n\t\twindow.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, frag);\n\n\t// If hash changes haven't been explicitly disabled, update the hash\n\t// fragment to store history.\n\t} else if (this._wantsHashChange) {\n\t\tthis.fragment = frag;\n\t\tthis._updateHash(window.location, frag, options.replace);\n\t\tif (this.iframe && (frag != this.getFragment(this.getHash(this.iframe)))) {\n\t\t// Opening and closing the iframe tricks IE7 and earlier to push a history entry on hash-tag change.\n\t\t// When replace is true, we don't want this.\n\t\tif(!options.replace) this.iframe.document.open().close();\n\t\tthis._updateHash(this.iframe.location, frag, options.replace);\n\t\t}\n\n\t// If you've told us that you explicitly don't want fallback hashchange-\n\t// based history, then `navigate` becomes a page refresh.\n\t} else {\n\t\twindow.location.assign(this.options.root + fragment);\n\t}\n\tif (options.trigger) this.loadUrl(fragment);\n\t},\n\n\t// Update the hash location, either replacing the current entry, or adding\n\t// a new one to the browser history.\n\t_updateHash: function(location, fragment, replace) {\n\tif (replace) {\n\t\tlocation.replace(location.toString().replace(/(javascript:|#).*$/, '') + '#' + fragment);\n\t} else {\n\t\tlocation.hash = fragment;\n\t}\n\t}\n});\n\n// Backbone.View\n// -------------\n\n// Creating a Backbone.View creates its initial element outside of the DOM,\n// if an existing element is not provided...\nvar View = Backbone.View = function(options) {\n\tthis.cid = _.uniqueId('view');\n\tthis._configure(options || {});\n\tthis._ensureElement();\n\tthis.initialize.apply(this, arguments);\n\tthis.delegateEvents();\n};\n\n// Cached regex to split keys for `delegate`.\nvar delegateEventSplitter = /^(\\S+)\\s*(.*)$/;\n\n// List of view options to be merged as properties.\nvar viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName'];\n\n// Set up all inheritable **Backbone.View** properties and methods.\n_.extend(View.prototype, Events, {\n\n\t// The default `tagName` of a View's element is `\"div\"`.\n\ttagName: 'div',\n\n\t// jQuery delegate for element lookup, scoped to DOM elements within the\n\t// current view. This should be prefered to global lookups where possible.\n\t$: function(selector) {\n\treturn this.$el.find(selector);\n\t},\n\n\t// Initialize is an empty function by default. Override it with your own\n\t// initialization logic.\n\tinitialize: function(){},\n\n\t// **render** is the core function that your view should override, in order\n\t// to populate its element (`this.el`), with the appropriate HTML. The\n\t// convention is for **render** to always return `this`.\n\trender: function() {\n\treturn this;\n\t},\n\n\t// Remove this view from the DOM. Note that the view isn't present in the\n\t// DOM by default, so calling this method may be a no-op.\n\tremove: function() {\n\tthis.$el.remove();\n\treturn this;\n\t},\n\n\t// For small amounts of DOM Elements, where a full-blown template isn't\n\t// needed, use **make** to manufacture elements, one at a time.\n\t//\n\t//     var el = this.make('li', {'class': 'row'}, this.model.escape('title'));\n\t//\n\tmake: function(tagName, attributes, content) {\n\tvar el = document.createElement(tagName);\n\tif (attributes) $(el).attr(attributes);\n\tif (content) $(el).html(content);\n\treturn el;\n\t},\n\n\t// Change the view's element (`this.el` property), including event\n\t// re-delegation.\n\tsetElement: function(element, delegate) {\n\tif (this.$el) this.undelegateEvents();\n\tthis.$el = (element instanceof $) ? element : $(element);\n\tthis.el = this.$el[0];\n\tif (delegate !== false) this.delegateEvents();\n\treturn this;\n\t},\n\n\t// Set callbacks, where `this.events` is a hash of\n\t//\n\t// *{\"event selector\": \"callback\"}*\n\t//\n\t//     {\n\t//       'mousedown .title':  'edit',\n\t//       'click .button':     'save'\n\t//       'click .open':       function(e) { ... }\n\t//     }\n\t//\n\t// pairs. Callbacks will be bound to the view, with `this` set properly.\n\t// Uses event delegation for efficiency.\n\t// Omitting the selector binds the event to `this.el`.\n\t// This only works for delegate-able events: not `focus`, `blur`, and\n\t// not `change`, `submit`, and `reset` in Internet Explorer.\n\tdelegateEvents: function(events) {\n\tif (!(events || (events = getValue(this, 'events')))) return;\n\tthis.undelegateEvents();\n\tfor (var key in events) {\n\t\tvar method = events[key];\n\t\tif (!_.isFunction(method)) method = this[events[key]];\n\t\tif (!method) throw new Error('Method \"' + events[key] + '\" does not exist');\n\t\tvar match = key.match(delegateEventSplitter);\n\t\tvar eventName = match[1], selector = match[2];\n\t\tmethod = _.bind(method, this);\n\t\teventName += '.delegateEvents' + this.cid;\n\t\tif (selector === '') {\n\t\tthis.$el.bind(eventName, method);\n\t\t} else {\n\t\tthis.$el.delegate(selector, eventName, method);\n\t\t}\n\t}\n\t},\n\n\t// Clears all callbacks previously bound to the view with `delegateEvents`.\n\t// You usually don't need to use this, but may wish to if you have multiple\n\t// Backbone views attached to the same DOM element.\n\tundelegateEvents: function() {\n\tthis.$el.unbind('.delegateEvents' + this.cid);\n\t},\n\n\t// Performs the initial configuration of a View with a set of options.\n\t// Keys with special meaning *(model, collection, id, className)*, are\n\t// attached directly to the view.\n\t_configure: function(options) {\n\tif (this.options) options = _.extend({}, this.options, options);\n\tfor (var i = 0, l = viewOptions.length; i < l; i++) {\n\t\tvar attr = viewOptions[i];\n\t\tif (options[attr]) this[attr] = options[attr];\n\t}\n\tthis.options = options;\n\t},\n\n\t// Ensure that the View has a DOM element to render into.\n\t// If `this.el` is a string, pass it through `$()`, take the first\n\t// matching element, and re-assign it to `el`. Otherwise, create\n\t// an element from the `id`, `className` and `tagName` properties.\n\t_ensureElement: function() {\n\tif (!this.el) {\n\t\tvar attrs = getValue(this, 'attributes') || {};\n\t\tif (this.id) attrs.id = this.id;\n\t\tif (this.className) attrs['class'] = this.className;\n\t\tthis.setElement(this.make(this.tagName, attrs), false);\n\t} else {\n\t\tthis.setElement(this.el, false);\n\t}\n\t}\n\n});\n\n// The self-propagating extend function that Backbone classes use.\nvar extend = function (protoProps, classProps) {\n\tvar child = inherits(this, protoProps, classProps);\n\tchild.extend = this.extend;\n\treturn child;\n};\n\n// Set up inheritance for the model, collection, and view.\nModel.extend = Collection.extend = Router.extend = View.extend = extend;\n\n// Backbone.sync\n// -------------\n\n// Map from CRUD to HTTP for our default `Backbone.sync` implementation.\nvar methodMap = {\n\t'create': 'POST',\n\t'update': 'PUT',\n\t'delete': 'DELETE',\n\t'read':   'GET'\n};\n\n// Override this function to change the manner in which Backbone persists\n// models to the server. You will be passed the type of request, and the\n// model in question. By default, makes a RESTful Ajax request\n// to the model's `url()`. Some possible customizations could be:\n//\n// * Use `setTimeout` to batch rapid-fire updates into a single request.\n// * Send up the models as XML instead of JSON.\n// * Persist models via WebSockets instead of Ajax.\n//\n// Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests\n// as `POST`, with a `_method` parameter containing the true HTTP method,\n// as well as all requests with the body as `application/x-www-form-urlencoded`\n// instead of `application/json` with the model in a param named `model`.\n// Useful when interfacing with server-side languages like **PHP** that make\n// it difficult to read the body of `PUT` requests.\nBackbone.sync = function(method, model, options) {\n\tvar type = methodMap[method];\n\n\t// Default options, unless specified.\n\toptions || (options = {});\n\n\t// Default JSON-request options.\n\tvar params = {type: type, dataType: 'json'};\n\n\t// Ensure that we have a URL.\n\tif (!options.url) {\n\tparams.url = getValue(model, 'url') || urlError();\n\t}\n\n\t// Ensure that we have the appropriate request data.\n\tif (!options.data && model && (method == 'create' || method == 'update')) {\n\tparams.contentType = 'application/json';\n\tparams.data = JSON.stringify(model.toJSON());\n\t}\n\n\t// For older servers, emulate JSON by encoding the request into an HTML-form.\n\tif (Backbone.emulateJSON) {\n\tparams.contentType = 'application/x-www-form-urlencoded';\n\tparams.data = params.data ? {model: params.data} : {};\n\t}\n\n\t// For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n\t// And an `X-HTTP-Method-Override` header.\n\tif (Backbone.emulateHTTP) {\n\tif (type === 'PUT' || type === 'DELETE') {\n\t\tif (Backbone.emulateJSON) params.data._method = type;\n\t\tparams.type = 'POST';\n\t\tparams.beforeSend = function(xhr) {\n\t\txhr.setRequestHeader('X-HTTP-Method-Override', type);\n\t\t};\n\t}\n\t}\n\n\t// Don't process data on a non-GET request.\n\tif (params.type !== 'GET' && !Backbone.emulateJSON) {\n\tparams.processData = false;\n\t}\n\n\t// Make the request, allowing the user to override any Ajax options.\n\treturn $.ajax(_.extend(params, options));\n};\n\n// Wrap an optional error callback with a fallback error event.\nBackbone.wrapError = function(onError, originalModel, options) {\n\treturn function(model, resp) {\n\tresp = model === originalModel ? resp : model;\n\tif (onError) {\n\t\tonError(originalModel, resp, options);\n\t} else {\n\t\toriginalModel.trigger('error', originalModel, resp, options);\n\t}\n\t};\n};\n\n// Helpers\n// -------\n\n// Shared empty constructor function to aid in prototype-chain creation.\nvar ctor = function(){};\n\n// Helper function to correctly set up the prototype chain, for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\nvar inherits = function(parent, protoProps, staticProps) {\n\tvar child;\n\n\t// The constructor function for the new subclass is either defined by you\n\t// (the \"constructor\" property in your `extend` definition), or defaulted\n\t// by us to simply call the parent's constructor.\n\tif (protoProps && protoProps.hasOwnProperty('constructor')) {\n\tchild = protoProps.constructor;\n\t} else {\n\tchild = function(){ parent.apply(this, arguments); };\n\t}\n\n\t// Inherit class (static) properties from parent.\n\t_.extend(child, parent);\n\n\t// Set the prototype chain to inherit from `parent`, without calling\n\t// `parent`'s constructor function.\n\tctor.prototype = parent.prototype;\n\tchild.prototype = new ctor();\n\n\t// Add prototype properties (instance properties) to the subclass,\n\t// if supplied.\n\tif (protoProps) _.extend(child.prototype, protoProps);\n\n\t// Add static properties to the constructor function, if supplied.\n\tif (staticProps) _.extend(child, staticProps);\n\n\t// Correctly set child's `prototype.constructor`.\n\tchild.prototype.constructor = child;\n\n\t// Set a convenience property in case the parent's prototype is needed later.\n\tchild.__super__ = parent.prototype;\n\n\treturn child;\n};\n\n// Helper function to get a value from a Backbone object as a property\n// or as a function.\nvar getValue = function(object, prop) {\n\tif (!(object && object[prop])) return null;\n\treturn _.isFunction(object[prop]) ? object[prop]() : object[prop];\n};\n\n// Throw an error when a URL is needed, and none is supplied.\nvar urlError = function() {\n\tthrow new Error('A \"url\" property or function must be specified');\n};\n\n}).call(this);\n\n"]}]}