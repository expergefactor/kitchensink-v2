{"remainingRequest":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js??ref--4-2!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/lib/logger.js","dependencies":[{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/lib/logger.js","mtime":1603117193224},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyogZ2xvYmFsIEVOVl9QUk9EICovCmNsYXNzIExvZ2dlciB7CiAgY29uc3RydWN0b3IoKSB7CiAgICB0aGlzLmhpc3RvcnkgPSAnJzsKICAgIHRoaXMubG9nZ2VyID0gXy5leHRlbmQoe30sIEJhY2tib25lLkV2ZW50cyk7CiAgfQoKICBsb2coLi4udGhlQXJndW1lbnRzKSB7CiAgICAvLyBTdHJpbmdpZnkgbm9uLXN0cmluZ3MKICAgIGxldCBtYXBwZWRBcmdzID0gdGhlQXJndW1lbnRzLm1hcChhcmd1bWVudCA9PiB7CiAgICAgIHJldHVybiB0eXBlb2YgYXJndW1lbnQgPT09ICdzdHJpbmcnID8gYXJndW1lbnQgOiBKU09OLnN0cmluZ2lmeShhcmd1bWVudCwgbnVsbCwgMik7CiAgICB9KTsKICAgIGNvbnN0IG1lc3NhZ2UgPSBtYXBwZWRBcmdzLmpvaW4oJyAnKTsKICAgIGNvbnN0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcoJ2VuLVVTJywgewogICAgICBob3VyMTI6IGZhbHNlCiAgICB9KTsgLy8gVXNlIGVycm9yLWxldmVsIGZvciBwcm9kdWN0aW9uIG9yIHRoZXkgd2lsbCBub3Qgc2hvdyBpbiBYY29kZSBjb25zb2xlCgogICAgVGkuQVBJW2ZhbHNlID8gJ2Vycm9yJyA6ICdpbmZvJ10obWVzc2FnZSk7IC8vIEFkZCB0aGUgbWVzc2FnZSB0byBhIGdsb2JhbCBjb25zdGlhYmxlIGZvciBjb250cm9sbGVycy9jb25zb2xlLmpzIHRvIHVzZQoKICAgIHRoaXMuaGlzdG9yeSA9IGAke3RoaXMuaGlzdG9yeX0gWyR7dGltZXN0YW1wfV0gJHttZXNzYWdlfVxuXG5gOyAvLyBUcmlnZ2VyIGFuIGV2ZW50IGZvciBjb250cm9sbGVycy9jb25zb2xlLmpzIHRvIGxpc3RlbiB0byBhbmQgZGlzcGxheSB0aGUgbG9nCgogICAgdGhpcy5sb2dnZXIudHJpZ2dlcignY2hhbmdlJyk7CiAgfQoKICBjbGVhckhpc3RvcnkoKSB7CiAgICB0aGlzLmhpc3RvcnkgPSAnJzsKICB9CgogIG9uKGV2ZW50LCBjYikgewogICAgdGhpcy5sb2dnZXIub24oZXZlbnQsIGNiKTsKICB9Cgp9CgpleHBvcnQgY29uc3QgbG9nZ2VyID0gbmV3IExvZ2dlcigpOw=="},{"version":3,"sources":["/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/lib/logger.js"],"names":["Logger","constructor","history","logger","_","extend","Backbone","Events","log","theArguments","mappedArgs","map","argument","JSON","stringify","message","join","timestamp","Date","toLocaleString","hour12","Ti","API","trigger","clearHistory","on","event","cb"],"mappings":"AAAA;AAEA,MAAMA,MAAN,CAAa;AACZC,EAAAA,WAAW,GAAG;AACb,SAAKC,OAAL,GAAe,EAAf;AACA,SAAKC,MAAL,GAAcC,CAAC,CAACC,MAAF,CAAS,EAAT,EAAaC,QAAQ,CAACC,MAAtB,CAAd;AACA;;AAEDC,EAAAA,GAAG,CAAC,GAAGC,YAAJ,EAAkB;AACpB;AACA,QAAIC,UAAU,GAAGD,YAAY,CAACE,GAAb,CAAkBC,QAAD,IAAc;AAC/C,aAAQ,OAAOA,QAAP,KAAoB,QAArB,GAAiCA,QAAjC,GAA4CC,IAAI,CAACC,SAAL,CAAeF,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAAnD;AACA,KAFgB,CAAjB;AAIA,UAAMG,OAAO,GAAGL,UAAU,CAACM,IAAX,CAAgB,GAAhB,CAAhB;AACA,UAAMC,SAAS,GAAG,IAAIC,IAAJ,GAAWC,cAAX,CAA0B,OAA1B,EAAmC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAnC,CAAlB,CAPoB,CASpB;;AACAC,IAAAA,EAAE,CAACC,GAAH,CAAO,QAAW,OAAX,GAAqB,MAA5B,EAAoCP,OAApC,EAVoB,CAYpB;;AACA,SAAKb,OAAL,GAAgB,GAAE,KAAKA,OAAQ,KAAIe,SAAU,KAAIF,OAAQ,MAAzD,CAboB,CAepB;;AACA,SAAKZ,MAAL,CAAYoB,OAAZ,CAAoB,QAApB;AACA;;AAEDC,EAAAA,YAAY,GAAG;AACd,SAAKtB,OAAL,GAAe,EAAf;AACA;;AAEDuB,EAAAA,EAAE,CAACC,KAAD,EAAQC,EAAR,EAAY;AACb,SAAKxB,MAAL,CAAYsB,EAAZ,CAAeC,KAAf,EAAsBC,EAAtB;AACA;;AA/BW;;AAkCb,OAAO,MAAMxB,MAAM,GAAG,IAAIH,MAAJ,EAAf","sourcesContent":["/* global ENV_PROD */\n\nclass Logger {\n\tconstructor() {\n\t\tthis.history = '';\n\t\tthis.logger = _.extend({}, Backbone.Events);\n\t}\n\n\tlog(...theArguments) {\n\t\t// Stringify non-strings\n\t\tlet mappedArgs = theArguments.map((argument) => {\n\t\t\treturn (typeof argument === 'string') ? argument : JSON.stringify(argument, null, 2);\n\t\t});\n\n\t\tconst message = mappedArgs.join(' ');\n\t\tconst timestamp = new Date().toLocaleString('en-US', { hour12: false });\n\n\t\t// Use error-level for production or they will not show in Xcode console\n\t\tTi.API[ENV_PROD ? 'error' : 'info'](message);\n\n\t\t// Add the message to a global constiable for controllers/console.js to use\n\t\tthis.history = `${this.history} [${timestamp}] ${message}\\n\\n`;\n\n\t\t// Trigger an event for controllers/console.js to listen to and display the log\n\t\tthis.logger.trigger('change');\n\t}\n\n\tclearHistory() {\n\t\tthis.history = '';\n\t}\n\n\ton(event, cb) {\n\t\tthis.logger.on(event, cb);\n\t}\n}\n\nexport const logger = new Logger();\n"]}]}