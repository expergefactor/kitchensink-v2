{"remainingRequest":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js??ref--4-2!/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/controllers/phone/database.js","dependencies":[{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/controllers/phone/database.js","mtime":1603117181826},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/views/phone/database.xml","mtime":1603117232936},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/styles/phone/database.tss","mtime":1603117222711},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/node_modules/alloy-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IEFsbG95IGZyb20gJy9hbGxveSc7CnZhciBCYWNrYm9uZSA9IEFsbG95LkJhY2tib25lOwp2YXIgXyA9IEFsbG95Ll87CmltcG9ydCB7IGxvZ2dlciB9IGZyb20gJ2xvZ2dlcic7Ci8qKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiBUaGUgc2NvcGVkIGNvbnN0cnVjdG9yIG9mIHRoZSBjb250cm9sbGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgpmdW5jdGlvbiBfX3Byb2Nlc3NBcmcob2JqLCBrZXkpIHsKICB2YXIgYXJnID0gbnVsbDsKCiAgaWYgKG9iaikgewogICAgYXJnID0gb2JqW2tleV0gfHwgbnVsbDsKICB9CgogIHJldHVybiBhcmc7Cn0KCmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIENvbnRyb2xsZXIoKSB7CiAgcmVxdWlyZSgnL2FsbG95L2NvbnRyb2xsZXJzLycgKyAnQmFzZUNvbnRyb2xsZXInKS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKTsKCiAgdGhpcy5fX2NvbnRyb2xsZXJQYXRoID0gJ3Bob25lL2RhdGFiYXNlJzsKICB0aGlzLmFyZ3MgPSBhcmd1bWVudHNbMF0gfHwge307CgogIGlmIChhcmd1bWVudHNbMF0pIHsKICAgIHZhciBfX3BhcmVudFN5bWJvbCA9IF9fcHJvY2Vzc0FyZyhhcmd1bWVudHNbMF0sICdfX3BhcmVudFN5bWJvbCcpOwoKICAgIHZhciAkbW9kZWwgPSBfX3Byb2Nlc3NBcmcoYXJndW1lbnRzWzBdLCAnJG1vZGVsJyk7CgogICAgdmFyIF9faXRlbVRlbXBsYXRlID0gX19wcm9jZXNzQXJnKGFyZ3VtZW50c1swXSwgJ19faXRlbVRlbXBsYXRlJyk7CiAgfQoKICB2YXIgJCA9IHRoaXM7CiAgdmFyIGV4cG9ydHMgPSB7fTsKICB2YXIgX19kZWZlcnMgPSB7fTsgLy8gR2VuZXJhdGVkIGNvZGUgdGhhdCBtdXN0IGJlIGV4ZWN1dGVkIGJlZm9yZSBhbGwgVUkgYW5kL29yCiAgLy8gY29udHJvbGxlciBjb2RlLiBPbmUgZXhhbXBsZSBpcyBhbGwgbW9kZWwgYW5kIGNvbGxlY3Rpb24KICAvLyBkZWNsYXJhdGlvbnMgZnJvbSBtYXJrdXAuCiAgLy8gR2VuZXJhdGVkIFVJIGNvZGUKCiAgJC5fX3ZpZXdzWyJkYXRhYmFzZSJdID0gVGkuVUkuY3JlYXRlV2luZG93KHsKICAgIGJhY2tncm91bmRDb2xvcjogIndoaXRlIiwKICAgIGJhckNvbG9yOiBBbGxveS5DRkcuc3R5bGVzLnRpbnRDb2xvciwKICAgIG5hdlRpbnRDb2xvcjogIndoaXRlIiwKICAgIHRyYW5zbHVjZW50OiBmYWxzZSwKICAgIGJhY2tCdXR0b25UaXRsZTogIiIsCiAgICB0aXRsZUF0dHJpYnV0ZXM6IHsKICAgICAgY29sb3I6ICJ3aGl0ZSIKICAgIH0sCiAgICB0aXRsZTogIkRhdGFiYXNlIiwKICAgIGlkOiAiZGF0YWJhc2UiCiAgfSk7CiAgJC5fX3ZpZXdzWyJkYXRhYmFzZSJdICYmICQuYWRkVG9wTGV2ZWxWaWV3KCQuX192aWV3c1siZGF0YWJhc2UiXSk7CiAgaW50aXRpYWxpemVEYXRhYmFzZSA/ICQuYWRkTGlzdGVuZXIoJC5fX3ZpZXdzWyJkYXRhYmFzZSJdLCAnb3BlbicsIGludGl0aWFsaXplRGF0YWJhc2UpIDogX19kZWZlcnNbJyQuX192aWV3c1siZGF0YWJhc2UiXSFvcGVuIWludGl0aWFsaXplRGF0YWJhc2UnXSA9IHRydWU7CiAgJC5fX3ZpZXdzWyJfX2FsbG95SWQ3OCJdID0gVGkuVUkuY3JlYXRlTGFiZWwoewogICAgdGV4dDogJ0NoZWNrIG91dCB0aGUgQ29uc29sZSEnLAogICAgaWQ6ICJfX2FsbG95SWQ3OCIKICB9KTsKCiAgJC5fX3ZpZXdzWyJkYXRhYmFzZSJdLmFkZCgkLl9fdmlld3NbIl9fYWxsb3lJZDc4Il0pOwoKICBleHBvcnRzLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7fTsgLy8gbWFrZSBhbGwgSURlZCBlbGVtZW50cyBpbiAkLl9fdmlld3MgYXZhaWxhYmxlIHJpZ2h0IG9uIHRoZSAkIGluIGEKICAvLyBjb250cm9sbGVyJ3MgaW50ZXJuYWwgY29kZS4gRXh0ZXJuYWxseSB0aGUgSURlZCBlbGVtZW50cyB3aWxsCiAgLy8gYmUgYWNjZXNzZWQgd2l0aCBnZXRWaWV3KCkuCgoKICBfLmV4dGVuZCgkLCAkLl9fdmlld3MpOyAvLyBDb250cm9sbGVyIGNvZGUgZGlyZWN0bHkgZnJvbSB0aGUgZGV2ZWxvcGVyJ3MgY29udHJvbGxlciBmaWxlCgogIC8qKgogICAqIFRoZSBzY29wZWQgY29uc3RydWN0b3Igb2YgdGhlIGNvbnRyb2xsZXIuCiAgICoqLwoKCiAgKGZ1bmN0aW9uIGNvbnN0cnVjdG9yKCkge30pKCk7CgogIGZ1bmN0aW9uIGludGl0aWFsaXplRGF0YWJhc2UoKSB7CiAgICB2YXIgZGI7CgogICAgaWYgKFRpLlBsYXRmb3JtLm9zbmFtZSA9PT0gJ3dpbmRvd3MnKSB7CiAgICAgIGRiID0gVGkuRGF0YWJhc2UuaW5zdGFsbChUaS5GaWxlc3lzdGVtLnJlc291cmNlc0RpcmVjdG9yeSwgJ2RhdGFiYXNlcy9raXRjaGVuc2luay5kYicsICdraXRjaGVuc2luaycpOwogICAgfSBlbHNlIHsKICAgICAgZGIgPSBUaS5EYXRhYmFzZS5pbnN0YWxsKCcvZGF0YWJhc2VzL2tpdGNoZW5zaW5rLmRiJywgJ2tpdGNoZW5zaW5rJyk7CiAgICB9CgogICAgZGIgPSBUaS5EYXRhYmFzZS5vcGVuKCdraXRjaGVuc2luaycpOwogICAgdmFyIHVwZGF0ZU5hbWUgPSAnSSB3YXMgdXBkYXRlZCc7CiAgICB2YXIgdXBkYXRlSWQgPSA0OwogICAgLyoqCiAgICAgICAgICAgICAgICAgICAgICAgICAqCUNyZWF0ZSBuZXcgdGFibGUgYW5kIGZsdXNoIGNvbnRlbnRzIGZvciBhIGZyZXNoIHN0YXJ0LgogICAgICAgICAgICAgICAgICAgICAgICAgKiovCgogICAgZGIuZXhlY3V0ZSgnQ1JFQVRFIFRBQkxFIElGIE5PVCBFWElTVFMgREFUQUJBU0VURVNUICAoSUQgSU5URUdFUiwgTkFNRSBURVhUKScpOwogICAgZGIuZXhlY3V0ZSgnREVMRVRFIEZST00gREFUQUJBU0VURVNUJyk7CiAgICAvKioKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKglJbnNlcnQgbmV3IGRhdGEgdG8gdGhlIGRhdGFiYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqLwoKICAgIGRiLmV4ZWN1dGUoJ0lOU0VSVCBJTlRPIERBVEFCQVNFVEVTVCAoSUQsIE5BTUUgKSBWQUxVRVMoPyw/KScsIDEsICdOYW1lIDEnKTsKICAgIGRiLmV4ZWN1dGUoJ0lOU0VSVCBJTlRPIERBVEFCQVNFVEVTVCAoSUQsIE5BTUUgKSBWQUxVRVMoPyw/KScsIDIsICdOYW1lIDInKTsKICAgIGRiLmV4ZWN1dGUoJ0lOU0VSVCBJTlRPIERBVEFCQVNFVEVTVCAoSUQsIE5BTUUgKSBWQUxVRVMoPyw/KScsIDMsICdOYW1lIDMnKTsKICAgIGRiLmV4ZWN1dGUoJ0lOU0VSVCBJTlRPIERBVEFCQVNFVEVTVCAoSUQsIE5BTUUgKSBWQUxVRVMoPyw/KScsIDQsICdOYW1lIDQnKTsKICAgIGRiLmV4ZWN1dGUoJ0lOU0VSVCBJTlRPIERBVEFCQVNFVEVTVCAoSUQsIE5BTUUgKSBWQUxVRVMoPyw/KScsIDUsICdcdTIwNzAgXHUwMEI5IFx1MDBCMiBcdTAwQjMgXHUyMDc0IFx1MjA3NSBcdTIwNzYgXHUyMDc3IFx1MjA3OCBcdTIwNzknKTsKICAgIGxvZ2dlci5sb2coJ1RpLkRhdGFiYXNlJywgJ0pVU1QgSU5TRVJURUQsIHJvd3NBZmZlY3RlZCA9ICcgKyBkYi5yb3dzQWZmZWN0ZWQpOwogICAgbG9nZ2VyLmxvZygnVGkuRGF0YWJhc2UnLCAnSlVTVCBJTlNFUlRFRCwgbGFzdEluc2VydFJvd0lkID0gJyArIGRiLmxhc3RJbnNlcnRSb3dJZCk7CiAgICAvKioKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKglVcGRhdGUgdGhlIHByZXZpb3VzbHkgaW5zZXJ0ZWQgZGF0YS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgogICAgZGIuZXhlY3V0ZSgnVVBEQVRFIERBVEFCQVNFVEVTVCBTRVQgTkFNRSA9ID8gV0hFUkUgSUQgPSA/JywgdXBkYXRlTmFtZSwgdXBkYXRlSWQpOwogICAgZGIuZXhlY3V0ZSgnVVBEQVRFIERBVEFCQVNFVEVTVCBTRVQgTkFNRSA9ICJJIHdhcyB1cGRhdGVkLCB0b28hIiBXSEVSRSBJRCA9IDInKTsKICAgIGxvZ2dlci5sb2coJ1RpLkRhdGFiYXNlJywgJ1VQREFURUQgTkFNRSBUTyAiSSB3YXMgdXBkYXRlZCwgdG9vISInKTsKICAgIC8qKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKglEZWxldGUgZGF0YSBmcm9tIHRoZSBkYXRhYmFzZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoqLwoKICAgIGRiLmV4ZWN1dGUoJ0RFTEVURSBGUk9NIERBVEFCQVNFVEVTVCBXSEVSRSBJRCA9ID8nLCAxKTsKICAgIGxvZ2dlci5sb2coJ1RpLkRhdGFiYXNlJywgJ0RFTEVURUQgRlJPTSBEQVRBQkFTRSAoV0hFUkUgSUQgPSAxKScpOwogICAgLyoqCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICoJU2VsZWN0IChxdWVyeSkgZGF0YSBmcm9tIHRoZSBkYXRhYmFzZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKiovCgogICAgdmFyIHJvd3MgPSBkYi5leGVjdXRlKCdTRUxFQ1QgKiBGUk9NIERBVEFCQVNFVEVTVCcpOwogICAgbG9nZ2VyLmxvZygnVGkuRGF0YWJhc2UnLCAnUk9XIENPVU5UID0gJyArIHJvd3Mucm93Q291bnQpOwoKICAgIHdoaWxlIChyb3dzLmlzVmFsaWRSb3coKSkgewogICAgICBsb2dnZXIubG9nKCdUaS5EYXRhYmFzZScsICcgLSBJRDogJyArIHJvd3MuZmllbGQoMCkgKyAnIE5BTUU6ICcgKyByb3dzLmZpZWxkQnlOYW1lKCduYW1lJykgKyAnIENPTFVNTiBOQU1FICcgKyByb3dzLmZpZWxkTmFtZSgwKSk7CiAgICAgIHJvd3MubmV4dCgpOwogICAgfQoKICAgIHJvd3MuY2xvc2UoKTsKICAgIGRiLmNsb3NlKCk7IC8vIGNsb3NlIGRiIHdoZW4geW91J3JlIGRvbmUgdG8gc2F2ZSByZXNvdXJjZXMKCiAgICBsb2dnZXIubG9nKCdUaS5EYXRhYmFzZScsICdDTE9TRUQgREFUQUJBU0UhJyk7CiAgfSAvLyBHZW5lcmF0ZWQgY29kZSB0aGF0IG11c3QgYmUgZXhlY3V0ZWQgYWZ0ZXIgYWxsIFVJIGFuZAogIC8vIGNvbnRyb2xsZXIgY29kZS4gT25lIGV4YW1wbGUgZGVmZXJyZWQgZXZlbnQgaGFuZGxlcnMgd2hvc2UKICAvLyBmdW5jdGlvbnMgYXJlIG5vdCBkZWZpbmVkIHVudGlsIGFmdGVyIHRoZSBjb250cm9sbGVyIGNvZGUKICAvLyBpcyBleGVjdXRlZC4KCgogIF9fZGVmZXJzWyckLl9fdmlld3NbImRhdGFiYXNlIl0hb3BlbiFpbnRpdGlhbGl6ZURhdGFiYXNlJ10gJiYgJC5hZGRMaXN0ZW5lcigkLl9fdmlld3NbImRhdGFiYXNlIl0sICdvcGVuJywgaW50aXRpYWxpemVEYXRhYmFzZSk7IC8vIEV4dGVuZCB0aGUgJCBpbnN0YW5jZSB3aXRoIGFsbCBmdW5jdGlvbnMgYW5kIHByb3BlcnRpZXMKICAvLyBkZWZpbmVkIG9uIHRoZSBleHBvcnRzIG9iamVjdC4KCiAgXy5leHRlbmQoJCwgZXhwb3J0cyk7Cn0="},{"version":3,"sources":["/Users/ssaddique/Axway/KitchenSink-v2-update/kitchensink-v2/app/controllers/phone/database.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;;;AACA,GAAA,SAAA,WAAA,GAAA,CAEA,CAFA;;AAIA,WAAA,mBAAA,GAAA;AACA,QAAA,EAAA;;AACA,QAAA,EAAA,CAAA,QAAA,CAAA,MAAA,KAAA,SAAA,EAAA;AACA,MAAA,EAAA,GAAA,EAAA,CAAA,QAAA,CAAA,OAAA,CAAA,EAAA,CAAA,UAAA,CAAA,kBAAA,EAAA,0BAAA,EAAA,aAAA,CAAA;AACA,KAFA,MAEA;AACA,MAAA,EAAA,GAAA,EAAA,CAAA,QAAA,CAAA,OAAA,CAAA,2BAAA,EAAA,aAAA,CAAA;AACA;;AACA,IAAA,EAAA,GAAA,EAAA,CAAA,QAAA,CAAA,IAAA,CAAA,aAAA,CAAA;AACA,QAAA,UAAA,GAAA,eAAA;AACA,QAAA,QAAA,GAAA,CAAA;AAEA;AACA;AACA;;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,kEAAA;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,0BAAA;AAEA;AACA;AACA;;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,kDAAA,EAAA,CAAA,EAAA,QAAA;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,kDAAA,EAAA,CAAA,EAAA,QAAA;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,kDAAA,EAAA,CAAA,EAAA,QAAA;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,kDAAA,EAAA,CAAA,EAAA,QAAA;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,kDAAA,EAAA,CAAA,EAAA,uEAAA;AAEA,IAAA,MAAA,CAAA,GAAA,CAAA,aAAA,EAAA,mCAAA,EAAA,CAAA,YAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,aAAA,EAAA,sCAAA,EAAA,CAAA,eAAA;AAEA;AACA;AACA;;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,+CAAA,EAAA,UAAA,EAAA,QAAA;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,mEAAA;AAEA,IAAA,MAAA,CAAA,GAAA,CAAA,aAAA,EAAA,uCAAA;AAEA;AACA;AACA;;AACA,IAAA,EAAA,CAAA,OAAA,CAAA,uCAAA,EAAA,CAAA;AAEA,IAAA,MAAA,CAAA,GAAA,CAAA,aAAA,EAAA,sCAAA;AAEA;AACA;AACA;;AACA,QAAA,IAAA,GAAA,EAAA,CAAA,OAAA,CAAA,4BAAA,CAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,aAAA,EAAA,iBAAA,IAAA,CAAA,QAAA;;AAEA,WAAA,IAAA,CAAA,UAAA,EAAA,EAAA;AACA,MAAA,MAAA,CAAA,GAAA,CAAA,aAAA,EAAA,YAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,SAAA,GAAA,IAAA,CAAA,WAAA,CAAA,MAAA,CAAA,GAAA,eAAA,GAAA,IAAA,CAAA,SAAA,CAAA,CAAA,CAAA;AACA,MAAA,IAAA,CAAA,IAAA;AACA;;AAEA,IAAA,IAAA,CAAA,KAAA;AACA,IAAA,EAAA,CAAA,KAAA,GAxDA,CAwDA;;AAEA,IAAA,MAAA,CAAA,GAAA,CAAA,aAAA,EAAA,kBAAA;AACA,G","sourcesContent":["\n\n/**\n * The scoped constructor of the controller.\n **/\n(function constructor() {\n\n})();\n\nfunction intitializeDatabase() {\n  let db;\n  if (Ti.Platform.osname === 'windows') {\n    db = Ti.Database.install(Ti.Filesystem.resourcesDirectory, 'databases/kitchensink.db', 'kitchensink');\n  } else {\n    db = Ti.Database.install('/databases/kitchensink.db', 'kitchensink');\n  }\n  db = Ti.Database.open('kitchensink');\n  const updateName = 'I was updated';\n  const updateId = 4;\n\n  /**\n                       *\tCreate new table and flush contents for a fresh start.\n                       **/\n  db.execute('CREATE TABLE IF NOT EXISTS DATABASETEST  (ID INTEGER, NAME TEXT)');\n  db.execute('DELETE FROM DATABASETEST');\n\n  /**\n                                           *\tInsert new data to the database\n                                           **/\n  db.execute('INSERT INTO DATABASETEST (ID, NAME ) VALUES(?,?)', 1, 'Name 1');\n  db.execute('INSERT INTO DATABASETEST (ID, NAME ) VALUES(?,?)', 2, 'Name 2');\n  db.execute('INSERT INTO DATABASETEST (ID, NAME ) VALUES(?,?)', 3, 'Name 3');\n  db.execute('INSERT INTO DATABASETEST (ID, NAME ) VALUES(?,?)', 4, 'Name 4');\n  db.execute('INSERT INTO DATABASETEST (ID, NAME ) VALUES(?,?)', 5, '\\u2070 \\u00B9 \\u00B2 \\u00B3 \\u2074 \\u2075 \\u2076 \\u2077 \\u2078 \\u2079');\n\n  logger.log('Ti.Database', 'JUST INSERTED, rowsAffected = ' + db.rowsAffected);\n  logger.log('Ti.Database', 'JUST INSERTED, lastInsertRowId = ' + db.lastInsertRowId);\n\n  /**\n                                                                                        *\tUpdate the previously inserted data.\n                                                                                        **/\n  db.execute('UPDATE DATABASETEST SET NAME = ? WHERE ID = ?', updateName, updateId);\n  db.execute('UPDATE DATABASETEST SET NAME = \"I was updated, too!\" WHERE ID = 2');\n\n  logger.log('Ti.Database', 'UPDATED NAME TO \"I was updated, too!\"');\n\n  /**\n                                                                       *\tDelete data from the database.\n                                                                       **/\n  db.execute('DELETE FROM DATABASETEST WHERE ID = ?', 1);\n\n  logger.log('Ti.Database', 'DELETED FROM DATABASE (WHERE ID = 1)');\n\n  /**\n                                                                      *\tSelect (query) data from the database.\n                                                                      **/\n  const rows = db.execute('SELECT * FROM DATABASETEST');\n  logger.log('Ti.Database', 'ROW COUNT = ' + rows.rowCount);\n\n  while (rows.isValidRow()) {\n    logger.log('Ti.Database', ' - ID: ' + rows.field(0) + ' NAME: ' + rows.fieldByName('name') + ' COLUMN NAME ' + rows.fieldName(0));\n    rows.next();\n  }\n\n  rows.close();\n  db.close(); // close db when you're done to save resources\n\n  logger.log('Ti.Database', 'CLOSED DATABASE!');\n}"]}]}